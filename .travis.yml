language: bash
services: docker

env:
  global:
    - BUILD_DIR="build/"
    - UPDATE_DIR="update/"

before_script:
  - whoami
  - cat /proc/version
  - df -h

  - echo "${STAGE}"
  - echo "${NO_TEST_RUN}"

  - echo "${REGISTRY_PASSWORD}" | docker login -u "${REGISTRY_USER}" --password-stdin

script:
  - echo "${APPID}"
    && echo "${MOD}"
    && echo "${FIX_APPMANIFEST}"
    && echo "${GAME}"
    && echo "${GAME_VERSION}"
  - date

  - if [ "$APPID" = 90 ]; then
      REGISTRY="${REGISTRY_GOLDSOURCE}";
    else
      REGISTRY="${REGISTRY_SOURCE}";
    fi

  # APPID, MOD, FIX_APPMANIFEST to be issued as variables for build
  - if [ "${STAGE}" = 'build' ]; then
      docker build
        --build-arg APPID="${APPID}"
        --build-arg MOD="${MOD}"
        --build-arg FIX_APPMANIFEST="${FIX_APPMANIFEST}"
        -t "${REGISTRY}/${GAME}:latest"
        -t "${REGISTRY}/${GAME}:${GAME_VERSION}"
        --label "appid=${APPID}"
        --label "mod=${MOD}"
        --label "game=${GAME}"
        --label "game_version=${GAME_VERSION}"
        "${BUILD_DIR}";
    elif [ "${STAGE}" = 'update' ]; then
      docker build
        --build-arg GAME_IMAGE="${REGISTRY}/${GAME}:latest"
        -t "${REGISTRY}/${GAME}:latest"
        "${UPDATE_DIR}";
    fi
  - docker images
  - docker inspect "${REGISTRY}/${GAME}:latest" -f '{{.Config.Labels}}'

  # Test the game image
  - if [ "${NO_TEST_RUN}" != true ]; then
      if [ "${APPID}" = 90 ]; then
        GAME_BIN="hlds_linux";
      else
        GAME_BIN="srcds_linux";
      fi;
      echo ${GAME_BIN};
      docker run --rm "${REGISTRY}/${GAME}:latest" "printenv && ls -al && exec ${GAME_BIN} -game ${GAME} +version +exit";
    fi
  - date

  # Push the image
  - travis_wait 30 docker push "${REGISTRY}/${GAME}"
  - date

after_script:
  - docker logout